<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://min-seong-kim.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://min-seong-kim.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-02T05:19:05+00:00</updated><id>https://min-seong-kim.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Design Tradeoffs for SSD Performance</title><link href="https://min-seong-kim.github.io/blog/2024/Design-Tradeoffs-for-SSD-Perf/" rel="alternate" type="text/html" title="Design Tradeoffs for SSD Performance"/><published>2024-09-15T00:00:00+00:00</published><updated>2024-09-15T00:00:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/Design-Tradeoffs-for-SSD-Perf</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/Design-Tradeoffs-for-SSD-Perf/"><![CDATA[<p>여름방학 FTL 스터디 때 공부한 SSD에 관한 논문인 Design Tradeoffs for SSD Performance에 대한 내용</p> <p><br/></p> <h1 id="introduction">Introduction</h1> <div style="display: flex; gap: 10px; justify-content: center;"> <div class="HDD" style="flex: 1;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/HDD-480.webp 480w,/assets/img/HDD-800.webp 800w,/assets/img/HDD-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/HDD.jpg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="SSD" style="flex: 1;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/SSD-480.webp 480w,/assets/img/SSD-800.webp 800w,/assets/img/SSD-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/SSD.jpg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>NAND Flash 기반 SSD는 기존에 사용한 HDD 보다 뛰어난 성능을 보여 컴퓨터 스토리지 구조에 큰 영향을 미쳤다.</p> <p><code class="language-plaintext highlighter-rouge">HDD</code>: 바이트 당 싼 가격, 더 큰 용량, 오래 사용 가능한 수명 <code class="language-plaintext highlighter-rouge">SSD</code>: HDD보다 뛰어난 대역폭, 속도, 랜덤 I/O 성능, 전력 절감, 내구성</p> <hr/> <p>SSD Design하면서 고려해야 할 특징들이 존재한다.</p> <ol> <li> <p><em>Data placement</em>: load balancing과 wear-leveling을 고려하여 SSD chip에 데이터를 위치시켜야 한다.</p> </li> <li> <p><em>Parallelism</em>: 특정 플래시 칩만으로는 최적의 성능을 낼 수 없기에 메모리 구성 요소들을 병렬로 작동시켜야 한다.</p> </li> <li> <p><em>Write Ordering</em>: NAND flash는 page 단위로 읽고 쓰고 block 단위로 삭제하기 때문에 삭제나 쓰기 작업 시 WAF(write amplification)가 발생할 수 있다. 때문에 쓰기 순서가 랜덤일 경우 성능 저하를 방지하기 위해 쓰기 순서를 효율적으로 관리해야 한다.</p> </li> <li> <p><em>Workload management</em>: SSD의 성능은 워크로드에 달려있다. 시퀀셜한 워크로드에서 좋은 성능을 보일 수 있지만 랜덤 워크로드에서는 나쁜 성능을 보일 수 있다.</p> </li> </ol> <h1 id="background">Background</h1> <div class="SSD Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ssd_arch-480.webp 480w,/assets/img/ssd_arch-800.webp 800w,/assets/img/ssd_arch-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ssd_arch.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <hr/> <div class="SSD Parelle Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ssd_paralle-480.webp 480w,/assets/img/ssd_paralle-800.webp 800w,/assets/img/ssd_paralle-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ssd_paralle.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>해당 모델은 2007년에 삼성에서 나온 NAND Flash 모델 K9XXG08UXM 이다.</p> <p>Single level cell(SLC) Flash 모델이며 다른 MLC TLC보다 성능과 수명이 길다.</p> <p>Flash Package의 크기는 4GB이고 Package마다 하나 이상의 다이를 가진다. <br/> 여러 패키지를 병렬로 사용해 데이터 처리 속도를 늘릴 수 있다.</p> <p>Die는 Package 내에서 독립적으로 작동하는 단위로 여러 Plane으로 구성된다. <br/> 각 Die는 칩 선택 라인과 Ready/Busy signal을 가지므로 한 Die가 Command를 받을 때 다른 Die는 Data 작업을 할 수 있다. <br/> 즉 각 Die마다 interleaving 작업이 가능합니다.</p> <p>Die 내 존재하는 Plane에서도 병렬 작업이 되기 때문에 Plane을 독립적으로 작동할 수 있다.</p>]]></content><author><name></name></author><category term="SSD"/><summary type="html"><![CDATA[This paper explores the various tradeoffs in solid state drive design]]></summary></entry><entry><title type="html">LevelDB Analysis of Deleted Record Restoration Techniques</title><link href="https://min-seong-kim.github.io/blog/2024/leveldb/" rel="alternate" type="text/html" title="LevelDB Analysis of Deleted Record Restoration Techniques"/><published>2024-09-15T00:00:00+00:00</published><updated>2024-09-15T00:00:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/leveldb</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/leveldb/"><![CDATA[<p>대검찰청 과제를 하며 공부한 내용들</p> <p><br/></p> <h2 id="leveldb-architecture">LevelDB Architecture</h2> <p><br/></p> <p>LevelDB는 Google이 설계한 Key-Value 저장소로 빠르고 효율적인 데이터 읽기 및 쓰기 작업을 위해 설계된 오픈소스 데이터베이스이다. <br/> LevelDB의 간단한 구조를 살펴보겠다.</p> <p><br/></p> <div class="leveldb Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/leveldb_arch-480.webp 480w,/assets/img/leveldb_arch-800.webp 800w,/assets/img/leveldb_arch-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/leveldb_arch.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p><strong>LevelDB</strong>는 LSM(Log-Structured Merge) Tree 구조를 기반으로한 Key-Value Store로 높은 쓰기 성능과 디스크 공간 효율성을 제공하며 위 그림처럼 MEM(MemTable), IMM(Immutable MemTable), SST(Sorted String Table), LOG 등으로 구성되어있다.</p> <p><code class="language-plaintext highlighter-rouge">MemTable</code>: LevelDB는 데이터를 우선 메모리에 저장한다. Key-Value 데이터 쌍을 SkipList 형태로 저장하며 Sort된 상태를 유지한다. 그리고 데이터가 가득 차면 IMM으로 전환되며 새 MEM을 생성한다. <br/> <code class="language-plaintext highlighter-rouge">Immutable MemTable</code>: 읽기 전용으로 변경된 MemTable이며 디스크로 Flush되기 전에 저장된 형태이다. <br/> <code class="language-plaintext highlighter-rouge">Flush</code>: IMM에 저장된 Key-Value 데이터 쌍을 디스크로 내보내는 과정으로 IMM을 SST 형태로 변환하여 디스크에 저장한다. <br/> <code class="language-plaintext highlighter-rouge">Sorted String Table</code>: SST는 여러 레벨로 나누어 관리되며 Level 0부터 데이터가 저장된다. Level 0에서는 IMM의 Key-Value 쌍이 바로 Flush되어 데이터 중복이 발생할 수 있지만 Level 1부터는 Compaction 과정을 거치며 중복된 데이터가 삭제된다. <br/> <code class="language-plaintext highlighter-rouge">Compaction</code>: 디스크에 저장된 여러 SST 파일을 병합하고 중복 데이터를 제거해 상위 레벨의 SST로 정리하는 과정이다. Compaction이 트리거되는 기준은 level 내 SST 파일이 일정 수(4개) 이상으로 생겼을 때, 또는 이후 level의 SST 파일의 크기가 임계값을 초과했을 때이다. 이후 SST들 간 겹치는 Key 범위를 선택하고 병합해 중복된 Key를 제거하고 정렬된 상태로 상위 level로 보낸다. <br/> <code class="language-plaintext highlighter-rouge">LOG</code>: 모든 쓰기 작업은 MEM에 저장되기 전 먼저 WAL(Write-Ahead Log)에 저장된다. 이는 비정상적인 종료 시 데이터 복구를 위해 사용되며 손상된 MEM을 복구할 수 있다.</p> <p><br/></p> <h2 id="sst-architecture">SST Architecture</h2> <p>LevelDB의 데이터 복구는 크게 메모리에서의 복구, 디스크에서의 복구로 구분할 수 있다. 먼저 디스크에서의 복구를 설명하기 위해 디스크에서 Key-Value가 저장되는 형태인 SST 구조를 더 자세하게 분석해보겠다.</p> <div class="SST Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/SST-480.webp 480w,/assets/img/SST-800.webp 800w,/assets/img/SST-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/SST.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><code class="language-plaintext highlighter-rouge">Data Block</code>: variable한 크기로(기본 4KB), Key와 Value 데이터 쌍을 저장하는 장소 <br/> <code class="language-plaintext highlighter-rouge">Filter Block</code>: variable한 크기로(기본 4KB), Data Block의 타켓 Key가 있는 지 유무 확인 <br/> <code class="language-plaintext highlighter-rouge">Metaindex Block</code>: variable한 크기로(기본 4KB), Filter Block의 메타 데이터 저장 <br/> <code class="language-plaintext highlighter-rouge">Index Block</code>: variable한 크기로(기본 4KB), Data Block의 메타 데이터 저장 <br/> <code class="language-plaintext highlighter-rouge">Footer</code>: variable한 크기로(기본 4KB), Metaindex/Index Block의 Block Handle 관리</p> <h2 id="entry-구조">Entry 구조</h2> <div class="SST Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/entry-480.webp 480w,/assets/img/entry-800.webp 800w,/assets/img/entry-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/entry.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>SSTable의 각 Block은 Block Builder 함수를 통해 생성하며 각 Block은 동일한 형식(Entry)으로 데이터를 저장되며 위와 같은 Entry 구조를 갖는다.</p> <h2 id="삭제-시나리오">삭제 시나리오</h2> <p>분석에 영향을 주는 요인은 배제</p> <ul> <li>Compression(데이터를 인코딩하여 압축하는 과정) 비활성화</li> <li>Filter 비활성화</li> </ul> <p>삽입:</p> <ul> <li>Key: KMS{n}</li> <li>Value: dankook_sslab{n}</li> <li>n: 0~400,000</li> </ul> <p>삭제</p> <ul> <li>KMS{n}에서 n의 범위가 0~120,000인 key</li> </ul> <hr/> <h3 id="leveldb에서-key-value-탐색-과정">LevelDB에서 Key-Value 탐색 과정</h3> <div class="SST Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/SSt_Data_block-480.webp 480w,/assets/img/SSt_Data_block-800.webp 800w,/assets/img/SSt_Data_block-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/SSt_Data_block.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>① Footer에서 Index Block의 Offset을 획득 <br/> ② Index Block의 Max Key에 따라 해당 Key의 Data Block Offset 획득 <br/> ③ Data Block의 Restart Point에 따라 적절한 Entry로 이동 <br/> ④ 해당하는 Key-Value 쌍 획득</p> <hr/> <h4 id="예시로-key-kms1-value-dankook_sslab1을-찾아가는-과정-분석">예시로 Key: KMS1, Value: dankook_sslab1을 찾아가는 과정 분석</h4> <h3 id="footer-구조">Footer 구조</h3> <div class="Cell Architecture" style="max-width: 50%; margin: auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/footer-480.webp 480w,/assets/img/footer-800.webp 800w,/assets/img/footer-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/footer.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <ul> <li>Block Handle format</li> <li>Offset: varint64</li> <li>Size: varint64</li> <li> <p>LevelDB에서 블록 데이터를 참조하는데 사용되는 구조</p> </li> <li>Meta Index Block’s index (char[p])</li> <li>Index Block’s index (char[q])</li> <li>Padding (char[40-p-q])</li> <li>Magic number (8B, fixed)</li> </ul> <p>Metaindex/Index Block의 Block Handle을 관리 <br/> 원하는 Key-Value 쌍을 얻기 위해선 Index Block의 내용을 알아야 하므로 Index Block의 Offset을 얻기 위해 Footer의 구조를 분석해야 한다.</p> <div class="Cell Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/footer_2-480.webp 480w,/assets/img/footer_2-800.webp 800w,/assets/img/footer_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/footer_2.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>Footer size만큼 SSTable의 마지막 48Byte를 출력했다. <br/> Metaindex + Index block handle을 디코딩하면 Index Block handle의 Offset 획득 가능 <br/> 그리고 Index Block으로 이동한다.</p> <hr/> <h2 id="index-block-구조">Index Block 구조</h2> <p>Index Block은 Data Block의 메타 데이터를 저장한다. <br/> Data Block의 메타데이터를 알아야 Data Block으로 이동할 수 있으므로 Index Block을 분석해야 한다.</p> <div class="Cell Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Index_block-480.webp 480w,/assets/img/Index_block-800.webp 800w,/assets/img/Index_block-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Index_block.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/> 위에서 설명한 Block entry구조처럼 다음 키값을 가진다.</p> <ul> <li>Key: 해당 데이터 블록의 최대 키(Max Key)</li> <li>Value: 해당 데이터 블록의 Offset과 Size</li> </ul> <p><code class="language-plaintext highlighter-rouge">Shared key length</code>: 이전 키와 중복되는 키의 길이(아래 예시에서는 첫 키이므로 중복되는 부분이 없다)</p> <p><code class="language-plaintext highlighter-rouge">Unshared key length</code>: 이전 키와 중복되지 않는 키의 길이</p> <p><code class="language-plaintext highlighter-rouge">Value length</code>: Value의 길이</p> <p><code class="language-plaintext highlighter-rouge">Unshared key</code></p> <ul> <li>Max Key: KMS10117: 해당 데이터 블록에서 가장 큰 키</li> <li>index: 86 27 -&gt; little endian으로 바꾸면 2786 -&gt; 10118번째 key(시작이 KMS0)</li> </ul> <p><code class="language-plaintext highlighter-rouge">Value</code></p> <ul> <li>Data Block의 Offset과 Size를 가진 Block Handle로 구성</li> <li>Offset과 Size로 분류한 후 해당 Data Block으로 이동</li> </ul> <hr/> <h2 id="data-block-구조">Data Block 구조</h2> <div class="Cell Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Data_block_arch-480.webp 480w,/assets/img/Data_block_arch-800.webp 800w,/assets/img/Data_block_arch-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Data_block_arch.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Data Block은 Data Entry Block, Restart Point로 구성된다. <br/> <code class="language-plaintext highlighter-rouge">Data Entry Block</code>: 실제 Key와 Value 쌍이 저장 <br/> <code class="language-plaintext highlighter-rouge">Restart Point</code>: Data Block 내 키들을 효율적으로 검색하기 위한 각 Data Block Entry의 Offset의 모음</p> <p><br/></p> <p>Restart Point에서 KMS1이 존재하는 Data Entry Block으로 이동하기 위해 첫 번째 Offset인 0x 00 00 0 00으로 이동(key는 이미 정렬되어 있으므로)</p> <p>Data Block의 Restart Point에 따라 Entry로 이동 <br/> 각 Data Block Entry의 위치를 파악하기 위해 탐색 <br/> 4B 단위의 Restart Point를 분석 후 이동 <br/> KMS1을 찾기 위해선 첫 번째 Data Block Entry로 이동</p> <hr/> <div class="Cell Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/fdata_arch-480.webp 480w,/assets/img/fdata_arch-800.webp 800w,/assets/img/fdata_arch-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/fdata_arch.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>그러면 해당하는 Key-Value 쌍 획득 <br/> Key: KMS1 <br/> Value: dankook_sslab1</p> <p><code class="language-plaintext highlighter-rouge">Shared key length</code>: 3</p> <ul> <li>앞 키인 “KMS0”과 찾는 키인 “KMS1”에서 “KMS” 3글자가 중복됨(맨 앞 문자열부터 기준으로)</li> </ul> <p><code class="language-plaintext highlighter-rouge">Unshared key length</code>: 9</p> <ul> <li>앞 키인 “KMS0”과 찾는 키인 “KMS1”에서 “KMS” 뒤부터 1 + index가 중복되지 않은 key부분</li> </ul> <p><code class="language-plaintext highlighter-rouge">Value length</code>: 14</p> <ul> <li>dankook_sslab1의 길이</li> </ul> <p><code class="language-plaintext highlighter-rouge">Unshared key</code>:</p> <ul> <li>앞에 중복된 부분인 “KMS”는 생략된다.</li> <li>그 뒤 “1”이 오고 그 뒤에 index 부분이 포함된다.</li> <li>01 02: 01은 어떤 의미인지 모르겠으나 02는 두 번째 key를 나타낸다.</li> </ul> <hr/> <h2 id="delete가-이루어지는-과정">Delete가 이루어지는 과정</h2> <ol> <li>WriteBatch::Delete를 통한 Delete 요청 <ul> <li><code class="language-plaintext highlighter-rouge">rep_</code>: WriteBatch의 내부 버퍼이며 memtable에 삽입된다.</li> <li>Sequence: fixed64</li> <li>Count: fixed32</li> <li>Data: record[count]</li> </ul> </li> <li> <p>WriteBatch(req_)를 MemTable에 삽입</p> </li> <li>rep_에서 받은 record에 따라 MemTableInserter에서 Delete() 처리 <ul> <li>Record:</li> <li><code class="language-plaintext highlighter-rouge">kTypeValue</code> (삽입할 데이터의 타입), <code class="language-plaintext highlighter-rouge">kTypeDeletion</code> (삭제할 데이터의 타입)</li> </ul> </li> <li>MemTable에 삭제할 key에 대한 delete marker가 기록 <ul> <li>Delete 연산은 다음과 같은 정보로 처리</li> <li>Key: 삭제할 key</li> <li>Value: 빈 value</li> <li>Type: <code class="language-plaintext highlighter-rouge">kTypeDeletion</code> (삭제 명령)</li> </ul> </li> <li>같은 Level에서 Compaction이 이루어진다면 해당 key와 value는 제거</li> </ol> <hr/> <ul> <li><strong>Memtable에서 삭제된 키가 존재하는 경우</strong> <ul> <li>Memtable 내에서 즉각적으로 삭제되지 않는다.</li> <li>삭제됐음을 나타내는 Delete Marker를 추가되어 Memtable에 삽입</li> <li>Flush되는 시점에서도 그대로 내려온다.</li> </ul> </li> <li><strong>SSTable에서 삭제된 키가 존재하는 경우</strong> <ul> <li>Compaction 과정이 진행되어야 물리적으로 데이터가 삭제된다.</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="Prosecution"/><category term="LevelDB"/><category term="forensics"/><summary type="html"><![CDATA[This is about the LevelDB forensics analysis by the prosecution.]]></summary></entry><entry><title type="html">SQLite Analysis of Deleted Record Restoration Techniques</title><link href="https://min-seong-kim.github.io/blog/2024/SQLite-Forensics/" rel="alternate" type="text/html" title="SQLite Analysis of Deleted Record Restoration Techniques"/><published>2024-08-20T00:00:00+00:00</published><updated>2024-08-20T00:00:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/SQLite-Forensics</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/SQLite-Forensics/"><![CDATA[<p>WDSC 논문 발표를 준비하며 공부한 SQLite Forensics 내용들</p> <p><br/></p> <h2 id="sqlite-architecture">SQLite Architecture</h2> <p>다음 사진은 SQLite의 구조를 보여준다.</p> <div class="SQLite Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/SQLite_Architecture-480.webp 480w,/assets/img/SQLite_Architecture-800.webp 800w,/assets/img/SQLite_Architecture-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/SQLite_Architecture.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>SQLite는 페이지를 기본 단위로 사용하며 여러 개의 페이지로 구성되어 있다. <br/> <code class="language-plaintext highlighter-rouge">Database file header</code>: 데이터베이스의 전반적인 메타데이터를 저장하고 첫 페이지에만 존재 <br/> <code class="language-plaintext highlighter-rouge">Page header</code>: 페이지의 메타데이터를 저장 <br/> <code class="language-plaintext highlighter-rouge">Cell pointer array</code>: 페이지 내 각 셀의 위치를 저장 <br/> <code class="language-plaintext highlighter-rouge">Unallocated area</code>: 아직 할당되지 않은 공간 <br/> <code class="language-plaintext highlighter-rouge">Cell</code>: 실제 데이터를 저장하는 단위 <br/> <code class="language-plaintext highlighter-rouge">Reserved space</code>: 성능 최적화나 데이터 무결성을 위한 공간</p> <p><br/></p> <h2 id="cell-architecture">Cell Architecture</h2> <div class="Cell Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Cell_Architecture-480.webp 480w,/assets/img/Cell_Architecture-800.webp 800w,/assets/img/Cell_Architecture-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Cell_Architecture.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>셀의 내부 구조를 살펴보면 <br/> <code class="language-plaintext highlighter-rouge">Cell header</code>: 셀의 크기와 레코드를 식별하는 Row ID를 저장 <br/> <code class="language-plaintext highlighter-rouge">Record header</code>: 헤더의 크기와 각 데이터 필드의 타입과 길이를 저장 <br/> <code class="language-plaintext highlighter-rouge">Data area</code>: 실제 데이터가 저장</p> <p><br/></p> <h2 id="deleted-record-recovery-technique">Deleted record recovery technique</h2> <p><br/></p> <h3 id="--free-page-list-analysis">- Free page list analysis</h3> <div class="Cell Architecture" style="max-width: 50%; margin: auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/free_page_list-480.webp 480w,/assets/img/free_page_list-800.webp 800w,/assets/img/free_page_list-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/free_page_list.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>Database 파일의 모든 프리 페이지는 리스트로 서로 연결되어 있고 삭제된 데이터를 포함하고 있다. <br/> 이 프리 페이지들을 분석하여 삭제된 레코드를 복원할 수 있다.</p> <p>아래는 삽입한 레코드이다.</p> <p><br/></p> <table> <thead> <tr> <th>Name</th> <th>Affiliation</th> <th>StudentID</th> </tr> </thead> <tbody> <tr> <td>KMS</td> <td>Dankook University1</td> <td>1</td> </tr> <tr> <td>LSH</td> <td>Dankook University2</td> <td>2</td> </tr> <tr> <td>…</td> <td>…</td> <td>…</td> </tr> <tr> <td>KVY</td> <td>Dankook University2999</td> <td>2999</td> </tr> <tr> <td>LYM</td> <td>Dankook University3000</td> <td>3000</td> </tr> </tbody> </table> <p><br/></p> <p>삭제된 데이터 흔적이 남아 있기 위해 SQLite 기능인 secure_delete를 비활성화하고 삭제 작업 진행</p> <p><br/></p> <p><code class="language-plaintext highlighter-rouge">sqlite&gt; PRAGMA secure_delete = 0;</code></p> <p><br/></p> <h3 id="database-file-header-analysis">Database file header analysis</h3> <p>아래 표는 Database file header에서 첫 40Byte의 구조를 보여준다.</p> <table> <thead> <tr> <th>Offset</th> <th>Size</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>16</td> <td>Header string</td> </tr> <tr> <td>16</td> <td>2</td> <td>Page size</td> </tr> <tr> <td>18</td> <td>1</td> <td>File format write version</td> </tr> <tr> <td>19</td> <td>1</td> <td>File format read version</td> </tr> <tr> <td>20</td> <td>1</td> <td>Size of reserved space</td> </tr> <tr> <td>21</td> <td>1</td> <td>Maximum payload fraction</td> </tr> <tr> <td>22</td> <td>1</td> <td>Minimum payload fraction</td> </tr> <tr> <td>23</td> <td>1</td> <td>Leaf payload fraction</td> </tr> <tr> <td>24</td> <td>4</td> <td>File change counter</td> </tr> <tr> <td>28</td> <td>4</td> <td>Size of database file in pages</td> </tr> <tr> <td>32</td> <td>4</td> <td>Page number of the first free list trunk page</td> </tr> <tr> <td>36</td> <td>4</td> <td>Total number of free list pages</td> </tr> </tbody> </table> <p><br/></p> <p>이 표를 기반으로 .db 파일의 파일 헤더를 분석해보면</p> <p><br/></p> <p><code class="language-plaintext highlighter-rouge">$hd test.db</code></p> <div class="sql file Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/sql_file_header-480.webp 480w,/assets/img/sql_file_header-800.webp 800w,/assets/img/sql_file_header-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/sql_file_header.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>페이지의 크기, 첫번째 free list page의 페이지 번호, 전체 free list page의 개수를 알 수 있다.</p> <p><code class="language-plaintext highlighter-rouge">Address = (offset32 – 1) x 0x1000</code></p> <p>위 식을 통해 free list page(0x5000)으로 이동</p> <p><br/></p> <h4 id="free-page-header-analysis">Free page header analysis</h4> <p>아래 표는 Database file header에서 첫 40Byte의 구조를 보여준다.</p> <p><br/></p> <table> <thead> <tr> <th>Offset</th> <th>Size</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>1</td> <td>B-tree page type</td> </tr> <tr> <td>1</td> <td>2</td> <td>Start of the first freeblock on the page</td> </tr> <tr> <td>3</td> <td>2</td> <td>Number of cells on the page</td> </tr> <tr> <td>5</td> <td>2</td> <td>Start of the cell content area</td> </tr> <tr> <td>7</td> <td>1</td> <td>Number of fragmented free bytes</td> </tr> <tr> <td>8</td> <td>4</td> <td>Right-most pointer</td> </tr> </tbody> </table> <p><br/> 페이지의 헤더를 통해 페이지의 형식, 페이지 내 셀의 개수, 첫 셀의 시작 주소 offse을 알 수 있다.</p> <div class="free page header Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/free_page_header_code-480.webp 480w,/assets/img/free_page_header_code-800.webp 800w,/assets/img/free_page_header_code-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/free_page_header_code.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/> 현재 주소인 0x5000에 시작 offse인 0x010c를 더하여 셀로 이동</p> <p><br/><br/></p> <h4 id="record-recovery">Record recovery</h4> <div class="free page header Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cell_code-480.webp 480w,/assets/img/cell_code-800.webp 800w,/assets/img/cell_code-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/cell_code.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <p>셀의 위치로 이동하면 각 셀의 헤더, 레코드 헤더, 데이터 영역을 확인할 수 있다.</p> <div class="free page header Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cell_code_2-480.webp 480w,/assets/img/cell_code_2-800.webp 800w,/assets/img/cell_code_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/cell_code_2.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>셀 헤더를 통해 셀의 크기를 확인할 수 있고 레코드 헤더를 통해 헤더 사이드와 데이터의 타입과 길이를 이용해 삭제된 데이터가 포함된 페이지를 복원할 수 있다.</p> <p><br/> 아래 사진을 보면 실제 삽입한 studentID와 삭제된 값이 일치하는 모습을 확인할 수 있다.</p> <div class="free page header Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cell_code_3-480.webp 480w,/assets/img/cell_code_3-800.webp 800w,/assets/img/cell_code_3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/cell_code_3.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><br/></p> <h3 id="artifact-carving">Artifact carving</h3> <div class="free page header Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ac_1-480.webp 480w,/assets/img/ac_1-800.webp 800w,/assets/img/ac_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ac_1.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>만약 프리 페이지 리스트 복원 방식에서 프리 페이지 리스트가 없거나 덮어 씌어진 경우 파일 곳곳에 저장된 slack space를 탐색해야 한다. 두 번째 복원 방식인 아티팩트 카빙은 파일 내 모든 공간을 검사하여 복원을 진행하는 방식이다. 이 기법은 데이터 베이스 파일 헤더와 레코드 헤더의 정보를 통해 삭제된 데이터에 대한 정보를 찾기 때문에 이 부분들이 덮어씌워진다면 패턴을 유추하는데 어려워 복구가 힘들다.</p> <p><br/></p> <div class="free page header Architecture"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ac_2-480.webp 480w,/assets/img/ac_2-800.webp 800w,/assets/img/ac_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ac_2.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>하지만 문제가 생길 수 있는 시나리오가 있다. 기존 테이블을 삭제 후 같은 형식의 새로운 테이블을 생성하고 레코드를 삽입했다. 이때 새로 삽입된 데이터들이 기존 삭제된 데이터를 덮어 씌어진 것을 확인할 수 있다. 해당 시나리오는 아티팩트 카빙 작업을 통해 복원이 가능하나 파일 헤더 또는 레코드 헤더가 덮어씌어진 경우 정상적인 복원이 어렵다.</p> <p><br/></p> <h2 id="evaluation">Evaluation</h2> <p>기존에 진행한 실험들은 각 기법마다 어느 정도의 복원률을 보장하는 지 제공하지 않아 직접 기법들을 실험했다. <br/> 정확한 복원률을 확인하기 위해 Database viewer와 hex dump를 사용했다. <br/></p> <div class="Architecture" style="max-width: 50%; margin: auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/FQlite-480.webp 480w,/assets/img/FQlite-800.webp 800w,/assets/img/FQlite-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/FQlite.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>실험에서는 높은 복원률을 보이는 SQLite 복원 도구인 FQLite를 선택해 SQLite 포렌식 코퍼스에서 평가를 진행하였으며 기존 SQLite 포렌식 코퍼스는 5개의 범주로 구성되어 있다. 하지만 실험에서는 “삭제 및 덮어씌워진 내용”에 해당하는 범주를 이용해 평가하였고 세부 범주는 다음과 같은 5개의 카테고리로 나눠 살펴봤다.</p> <h4 id="sqlite-파일-생성-범주">SQLite 파일 생성 범주</h4> <p>ⓐDeleted table, ⓑdeleted and overwritten table, ⓒdeleted record, ⓓoverwritten record, ⓔdeleted overflow page</p> <table> <thead> <tr> <th>Categories</th> <th>Operations</th> </tr> </thead> <tbody> <tr> <td>0A-03</td> <td>create 2, insert 10/each, drop/each</td> </tr> <tr> <td>0B-02</td> <td>create 3, insert 10/each, drop 1, create 1, insert 5</td> </tr> <tr> <td>0C-02</td> <td>create 2 (int cols), insert 20/each, delete 5/each</td> </tr> <tr> <td>0D-03</td> <td>create, insert 10, delete 5, insert 10: match 1</td> </tr> <tr> <td>0E-02</td> <td>create, insert 20 (Overflow due to the insertion of large records, many columns), delete 5</td> </tr> </tbody> </table> <p><br/> 이때 삭제된 데이터 복원을 확인하기 위해 secure_delete를 비활성화하고 삭제 작업을 진행 <br/></p> <h3 id="실험-결과">실험 결과</h3> <table> <thead> <tr> <th>ID</th> <th>Undark</th> <th>SQLite Deleted Records Parser</th> <th>SQLabs SQLite Doctor</th> <th>Stellar Phoenix Repair for SQLite</th> <th>SysTools SQLite Database Recover</th> <th>Sanderson Forensic Browser for SQLite</th> <th>FQLite</th> <th>Free page</th> <th>Artifact Carving</th> </tr> </thead> <tbody> <tr> <td>0A-01</td> <td>20/20*</td> <td>0/20</td> <td>0/20</td> <td>0/20</td> <td>0/20</td> <td>0/20</td> <td>20/20</td> <td>0/20</td> <td>20/20</td> </tr> <tr> <td>0A-03</td> <td>20/20*</td> <td>0/20</td> <td>0/20</td> <td>0/20</td> <td>0/20</td> <td>0/20</td> <td>20/20</td> <td>10/20</td> <td>10/20</td> </tr> <tr> <td>0B-01*</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>10/10</td> <td>5/10</td> <td>5/10</td> </tr> <tr> <td>0B-02</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>10/10</td> <td>0/10</td> <td>10/10</td> </tr> <tr> <td>0C-01*</td> <td>0/7</td> <td>0/7</td> <td>0/7</td> <td>0/7</td> <td>0/7</td> <td>7/7</td> <td>7/7</td> <td>0/7</td> <td>7/7</td> </tr> <tr> <td>0C-02</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>0/10</td> <td>10/10*</td> <td>10/10</td> <td>0/10</td> <td>10/10</td> </tr> <tr> <td>0D-01</td> <td>0/5</td> <td>2/5*</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>5/5</td> <td>0/5</td> <td>5/5</td> </tr> <tr> <td>0D-03</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>5/5</td> <td>0/5</td> <td>5/5</td> </tr> <tr> <td>0E-01</td> <td>3/7</td> <td>2/7</td> <td>0/7</td> <td>0/7</td> <td>0/7</td> <td>3/7</td> <td>7/7</td> <td>2/7</td> <td>5/7</td> </tr> <tr> <td>0E-02</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>0/5</td> <td>5/5</td> <td>0/5</td> <td>5/5</td> </tr> </tbody> </table> <p><br/> 실험 결과이다. <br/> 위 표는 SQLite 복원 방식 및 도구들의 복원율 상세 분석 결과를 보여준다. <br/> (*표시는 일부 복원 및 잘못된 복원이 포함된 경우) <br/></p> <hr/> <p>전반적인 결과를 확인해보면 프리 페이지 리스트를 통한 복원 기법이 아티팩트 카빙에 비해 복원률이 매우 낮은 것을 확인할 수 있다. 이는 대부분의 데이터베이스 파일 헤더에 프리 페이지에 대한 정보가 남아있지 않기 때문이다. 또한 Undartk나 SQLite Deleted Records Parser는 상대적으로 높은 복원률을 보였지만 대부분 잘못된 복원에 해당하는 경우가 많았다.</p> <hr/> <p>이때 아티팩트 카빙이 다른 범주에서는 복구율이 100%인 것에 비해 B-1 방식에서 복구율이 절반인 것을 확인할 수 있다. <br/> 이는 이전 아티팩트 카빙에서 보여준 시나리오처럼 데이터베이스 파일 헤더에 대한 정보가 없어 해당 레코드가 어디에 속해 있었는지 알 수 없기 때문이다.</p> <h5 id="recovery-rate-graph">Recovery Rate Graph</h5> <div class="Architecture" style="max-width: 50%; margin: auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/recovery_rate-480.webp 480w,/assets/img/recovery_rate-800.webp 800w,/assets/img/recovery_rate-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/recovery_rate.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>위 그림은 전 실험에서 진행한 복원 기법 별 복원율 그래프이다. <br/> 실험 결과는 프리 페이지 리스트의 경우 11.51% 정도 복원한 모습을 보이는 반면 아티팩트 카빙은 100%의 복원율을 보여줬다. <br/> 하지만 전에 말한 0B-01에서 보인 신뢰도 문제가 발생한다. <br/> 이 실험은 SQLite 포렌식 코퍼스에 한정된 실험 결과로 secure_delete가 수행되거나 안티 포렌식 기능인 Vacuum이 수행되면 모든 프리 리스트와 slack 공간이 회수되므로 복원이 불가능한 경우가 증가하게 된다.</p> <h5 id="recovery-performance-graph">Recovery Performance Graph</h5> <div class="Architecture" style="max-width: 60%; margin: auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/time_read-480.webp 480w,/assets/img/time_read-800.webp 800w,/assets/img/time_read-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/time_read.png" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>위 사진은 기법 별 성능 그래프이다. <br/> 이 실험은 아티팩트 카빙에서 덮어 씌어진 정도에 따라 복원 작업이 큰 차이를 보이므로 레코드 복원을 위한 페이지 헤더 획득까지의 과정을 수행하였다. <br/> 실험은 다음과 같은 환경에서 진행했다.</p> <table> <thead> <tr> <th>Component</th> <th>Specification</th> </tr> </thead> <tbody> <tr> <td>CPU</td> <td>12th Gen Intel(R) Core(TM) i7-12700H</td> </tr> <tr> <td>Memory</td> <td>16GB</td> </tr> <tr> <td>Database</td> <td>Chinook.db (15,607 lines, 1MB)</td> </tr> </tbody> </table> <hr/> <p><br/> 실험 결과 프리 페이지 리스트을 사용한 경우 아티팩트 카빙보가 약 32.34% 더 빠른 성능을 보였다. <br/> 그 이유는 아티팩트 카빙은 페이지 헤더가 손상되었을 가능성이 있어 추가 데이터 수집이 강제되기 때문입니다.</p> <p>하지만 이는 페이지 헤더만으로 판별 가능한 이상적인 경우이며 추가적인 셀 정보에 대한 작업이 필요한 경우 더 긴 작업 시간이 요구된다. <br/> 결과적으로 프리 페이지 리스트 및 페이지 유형에 대한 오프셋이 존재하는 경우 상대적으로 빠른 페이지 리스트 방식을 이요하고 이외 경우는 아티팩트 카빙을 적용하는 것이 효율적이다.</p>]]></content><author><name></name></author><category term="WDSC"/><category term="SQLite"/><category term="forensics"/><summary type="html"><![CDATA[This is about the sqlite forensics analysis published by WDSC.]]></summary></entry><entry><title type="html">2024 KCC</title><link href="https://min-seong-kim.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="2024 KCC"/><published>2024-06-28T00:00:00+00:00</published><updated>2024-06-28T00:00:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/tabs</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="d5f77dc0-5c56-4dcf-a050-b3866758d971" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="d5f77dc0-5c56-4dcf-a050-b3866758d971" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="faf089cc-fe69-4935-90e1-bae8021baae4" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="faf089cc-fe69-4935-90e1-bae8021baae4" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="d8551305-5a74-4c84-a73d-b6990086d98d" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="d8551305-5a74-4c84-a73d-b6990086d98d" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="academic"/><summary type="html"><![CDATA[Korea Computer Congress 2024 [6.26-28], ICC Jeju]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://min-seong-kim.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://min-seong-kim.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/typograms</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://min-seong-kim.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://min-seong-kim.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://min-seong-kim.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://min-seong-kim.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://min-seong-kim.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://min-seong-kim.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>